name: Build app1

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - .github/workflows/app1.yml
      - src/app1/**
  pull_request:
    branches: ["main"]
    paths:
      - .github/workflows/app1.yml
      - src/app1/**

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.14

      - name: Build app1 image
        id: build
        run: |
          $ErrorActionPreference = "Stop"

          $application="app1"
          $fullSemVer="${{ steps.gitversion.outputs.FullSemVer }}".Replace('+','.')
          echo "APPLICATION_NAME=${application}"
          echo "APPLICATION_NAME=${application}" >> $env:GITHUB_OUTPUT
          echo "APPLICATION_VERSION=${fullSemVer}"
          echo "APPLICATION_VERSION=${fullSemVer}" >> $env:GITHUB_OUTPUT

          $index = Get-Content ./src/${application}/app/index.html
          $index = $index -replace '(<!--Version-->)(.*)(<!--\/Version-->)', "<!--Version-->${fullSemVer}<!--/Version-->"
          $index | Set-Content ./src/${application}/app/index.html

          docker build --tag ${application}:latest --tag ${application}:${fullSemVer} --tag ${application}:${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor }}.${{ steps.gitversion.outputs.Patch }} --tag ${application}:${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor }} --tag ${application}:${{ steps.gitversion.outputs.Major }} ./src/${application}

          # GitHub Workflow Artifacts
          docker save ${application}:${fullSemVer} -o ${application}-${fullSemVer}.tar

          # GitHub Packages
          docker login ghcr.io -u $env:DOCKER_USER -p $env:DOCKER_PASSWORD
          docker push ghcr.io/$env:CR_USER/${application}:${fullSemVer}
          docker push ghcr.io/$env:CR_USER/${application}:${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor }}.${{ steps.gitversion.outputs.Patch }}
          docker push ghcr.io/$env:CR_USER/${application}:${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor }}
          docker push ghcr.io/$env:CR_USER/${application}:${{ steps.gitversion.outputs.Major }}
        shell: pwsh
        env:
          DOCKER_USER: $DOCKER_USER
          $DOCKER_PASSWORD: $DOCKER_PASSWORD

      - uses: actions/upload-artifact@v3
        name: Store app1 artifact
        with:
          name: ${{ steps.build.outputs.APPLICATION_NAME }}
          path: ${{ steps.build.outputs.APPLICATION_NAME }}-${{ steps.build.outputs.APPLICATION_VERSION }}.tar

  deployment_DEV:
    name: Deploy DEV
    runs-on: ubuntu-latest
    needs: build
    environment: app1 DEV
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app1

      - name: Display structure of downloaded files
        run: ls -R

  deployment_TST:
    name: Deploy TST
    runs-on: ubuntu-latest
    needs: deployment_DEV
    environment: app1 TST
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app1

      - name: Display structure of downloaded files
        run: ls -R

  deployment_ACC:
    name: Deploy ACC
    runs-on: ubuntu-latest
    needs: deployment_TST
    environment: app1 ACC
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app1

      - name: Display structure of downloaded files
        run: ls -R

  deployment_PRD:
    name: Deploy PRD
    runs-on: ubuntu-latest
    needs: deployment_ACC
    environment: app1 PRD
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app1

      - name: Display structure of downloaded files
        run: ls -R
