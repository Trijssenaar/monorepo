name: deploy-terraform
description: "Deploys the terraform infrastructure"

inputs:
  terraformModulePath:
    required: true
    description: "Path to the terraform module to deploy"
  environment:
    required: true
    description: "Name of the environment to deploy to"
  terraformApply:
    required: true
    description: "Whether to apply the terraform plan or not"
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Prepare Environment Variables
      uses: ./.github/template/prepare-environment-variables
      with:
        environment: ${{ inputs.environment }}

    - name: Prepare Azure
      uses: ./.github/template/prepare-azure

    - name: Prepare Terraform State
      uses: ./.github/template/prepare-tfstate
      id: prepare-tfstate

    - name: Prepare Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.7

    - name: "Artifact: Retrieve"
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: "Terraform ${{ steps.moduleName.outputs.moduleName }}"
      id: terraform
      run: |
        $name="${{ inputs.terraformModulePath }}".Replace('/','-')
        $zip=(Get-ChildItem -Path artifacts -Recurse -Filter $name_azure_*.zip)[0]
        $zipPath=$zip.FullName
        $zipFolder=$zip.DirectoryName

        Write-Host "Deploying $zipPath..."
        unzip $zipPath -d $zipFolder

        # Terraform Plan
        chmod --recursive +x $zipFolder
        terraform -chdir="$zipFolder" init -input=false -backend-config="resource_group_name=${{ steps.prepare-tfstate.outputs.resourceGroupName }}" -backend-config="storage_account_name=${{ steps.prepare-tfstate.outputs.storageAccountName }}" -backend-config="container_name=${{ steps.prepare-tfstate.outputs.containerName }}" -backend-config="key=${{ env.RESOURCE_GROUP_NAME }}.tfstate"
        if('${{ inputs.terraformApply }}' -eq 'true'){
          terraform -chdir="$zipFolder" apply -input=false $PWD/artifacts/${{ env.RESOURCE_GROUP_NAME }}.tfplan/${{ env.RESOURCE_GROUP_NAME }}.tfplan
          $terraformOutput=terraform -chdir="$zipFolder" output -json
          $terraformOutput
          $output=$terraformOutput | ConvertFrom-Json
          $output
          foreach($item in $output){
            $item
            echo "${$item.Name}=${$item.Value}" >> $env:GITHUB_OUTPUT
          }
        }else{
          terraform -chdir="$zipFolder" plan -var 'resource_group_name=${{ env.RESOURCE_GROUP_NAME }}' -var-file="$PWD/.github/environments/${{ inputs.environment }}.tfvars" -out="$PWD/${{ env.RESOURCE_GROUP_NAME }}.tfplan" -input=false
        }
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
        ARM_USE_OIDC: "true"
      shell: pwsh

    - name: Store Terraform Plan
      if: ${{ inputs.terraformApply == 'false'  }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.RESOURCE_GROUP_NAME }}.tfplan
        path: ${{ env.RESOURCE_GROUP_NAME }}.tfplan

    - name: Store Terraform Plan
      if: ${{ inputs.terraformApply == 'true'  }}
      run: |
        az keyvault secret list
      shell: pwsh
